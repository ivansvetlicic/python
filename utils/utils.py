# -*- coding: utf-8 -*-
"""utils

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B5ergKIhBydJSdC5NIwjgmovyeePZ33D
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import Normalizer
import re
from keras.preprocessing.text import Tokenizer
from keras.preprocessing import sequence
from sklearn.feature_extraction.text import TfidfVectorizer

class DataSource:
  def __init__(self, name):
    #load the data
    filepath = "data/" + name + ".csv"
    self.raw_src_data_df = pd.read_csv(filepath, encoding='latin-1')
  def select_attributes(self, cols):
    self.src_data_df = self.raw_src_data_df[cols].copy()
    return self.src_data_df

class MLTransformer:
  def __init__(self):
    pass
  def replace_missing_values(self, df):
    #replace all string nulls with blanks, all float and int nulls with avg of all values
    for col in df.columns:
      if df[col].dtype == 'object' or df[col].dtype == 'bool':
        df[col].fillna('', inplace=True)
      elif df[col].dtype == np.float64 or df[col].dtype == np.int:
        df[col].fillna(df[col].mean(), inplace=True)
      else:
        print("Error: unhanded data type:", df[col].dtype, col)
    return df

def select_cols(self, df, cols):
  self.data_df = df[cols].copy()
  return self.data_df

def nominal_to_numerical_OHE(self, df):
  #get all non-numerical values
  column_names = []
  nominal_data = df.select_dtypes(include=['object']).copy()
  #get all numerical values
  numeric_data = df.selct_dtypes(inlude=['number']).copy()
  #one-hot encoding
  ohe = OneHotEncoder(handle_unknown='ignore', sparse='False')
  encoded_val = ohe.fit_transform(nominal_data)
  column_names = np.array(list(numeric_data))
  feature_names = ohe.get_feature_names()
  column_names = np.concatenate((column_names, feature_names))
  ohe_encoder = ohe
  ohe_dataset = np.concatenate ((numeric_data, encoded_val), 1)
  return ohe_dataset, column_names

def nominal_to_numerical_CF(self, df):
  #get all non-numeric values
  self.nominal_data = df.select_dtypes(include=['object']).copy()
  #one hot encoding
  columnTransformer = ColumnTransformer([('encoder', OneHotEncoder(handle_unknown='ignore'), [2,4])], remainder='passthrough')
  self.cf_dataset = columnTransformer.fit_transform(nominal_data)
  return self.cf_dataset

def normalize_data(self, df):
  scaler = Normalizer()
  transofrmer = scaler.fit(df)
  scaled_data = transformer.transform(df)
  self.transformer = transformer
  return scaled_data

def transform_OHE(self, df):
  #get all non-numeric values
  self.nominal_data = df.select_dtypes(include=['object']).copy()
  #get all numneric values
  self.numeric_data = df.select_dtypes(include=['number']).copy()
  #one hot encoding, use the existing model that was used for training
  encoded_val = self.ohe_encoder.transform(self.nominal_data)
  self.ohe_dataset = np.concatenate((self.numeric_data, encoded_val), 1)
  return self.ohe_dataset

def to_lowercase(self, df):
  src_data_df2 = df.copy()
  for col in src_data_df2.select_dtypes(include=['object']).columns.values:
    src_data_df2[col] = src_data_df2[col].str.lower()
    print("Converting to lowercase column: ", col)
  return src_data_df2

